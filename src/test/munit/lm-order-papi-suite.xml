<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="lm-order-papi-suite.xml" />
	<munit:test name="lm-order-papi-main-test" doc:id="9eeef60c-f0c2-4bdd-8773-1abdfb88365f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="5eaf2401-4bc5-497a-bca0-2635a34881f0" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/api/*" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="118c8bc7-b706-4e97-b857-ac5e60fe7e03" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="1dd4dfed-b09b-4682-afd2-bff4ff366b1f" processor="error-handler">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="global-ErrorError_Handler" attributeName="name" />
					<munit-tools:with-attribute whereValue="5c96c675-4c0a-447a-8fbf-2aa7fcdedc4f" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="89ff5602-0a56-4569-8789-2718090ca4a5" >
				<munit:payload value="#[readUrl('classpath://lmorderpapimaintest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://lmorderpapimaintest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to lm-order-papi-main" doc:id="a43b05b4-9012-49d6-88b6-d4b48db28515" name="lm-order-papi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="0f57e768-ed66-4100-a7b1-507d03c3e20a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import lmorderpapimaintest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="lm-order-papi-console-test" doc:id="caf7f7e5-8584-4acc-a8c9-435a4dc296f5" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="c9976a20-16aa-49df-93ff-96b2f83027b7" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/console/*" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="e6218c1a-e7bc-46fe-9366-4ea4b8411abb" processor="apikit:console">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="e82a32d8-10cc-43df-96a2-37247cdbac1f" >
				<munit:payload value="#[readUrl('classpath://lmorderpapiconsoletest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://lmorderpapiconsoletest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to lm-order-papi-console" doc:id="5d779ba2-1fd1-4fd5-a948-d3d8c3f13f43" name="lm-order-papi-console"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="501629ab-b2ad-4ee2-87a0-c9560cea6ef1" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import lmorderpapiconsoletest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="put:\customers\(customerid)\address:application\json:lm-order-papi-config-test" doc:id="5ec48c2d-534e-468b-8acf-d061d2899679" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="40877e97-6adc-4b74-87e4-a1494c1763c5" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://putcustomerscustomeridaddressapplicationjsonlmorderpapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://putcustomerscustomeridaddressapplicationjsonlmorderpapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://putcustomerscustomeridaddressapplicationjsonlmorderpapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to put:\customers\(customerid)\address:application\json:lm-order-papi-config" doc:id="2a8e677f-135f-4689-b0e1-b8f375e31bb2" name="put:\customers\(customerid)\address:application\json:lm-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="75f4627b-6438-45c6-b424-bc5bb85d15ef" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import putcustomerscustomeridaddressapplicationjsonlmorderpapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="put:\order\(orderid):application\json:lm-order-papi-config-test" doc:id="e4d034f5-fff2-49c2-9c30-6b185a780203" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="09ecc931-2b65-40ae-b7f1-80aa71f649a9" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://putorderorderidapplicationjsonlmorderpapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://putorderorderidapplicationjsonlmorderpapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://putorderorderidapplicationjsonlmorderpapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to put:\order\(orderid):application\json:lm-order-papi-config" doc:id="5c9f2fe1-2078-4ac9-bcde-6e2ae1c7acf7" name="put:\order\(orderid):application\json:lm-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b8858731-66f9-4ba9-8447-0cabcf72222a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import putorderorderidapplicationjsonlmorderpapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="put:\tracking\(trackingid):application\json:lm-order-papi-config-test" doc:id="25788119-e5f4-4ffc-9893-a42ff8c8e77a" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="10984aa3-4f3c-4254-b8ff-16f02a5e4f28" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://puttrackingtrackingidapplicationjsonlmorderpapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://puttrackingtrackingidapplicationjsonlmorderpapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://puttrackingtrackingidapplicationjsonlmorderpapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to put:\tracking\(trackingid):application\json:lm-order-papi-config" doc:id="5423f306-4a21-4f70-b55b-4347be1fdb6b" name="put:\tracking\(trackingid):application\json:lm-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a47eb677-a150-42a4-bc10-cb0a7cbbc917" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import puttrackingtrackingidapplicationjsonlmorderpapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\customers\(customerid)\address\(addressid):lm-order-papi-config-test" doc:id="41f987f1-77c8-41eb-ba0f-a539390f9d07" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="0e24bc71-ee2b-4830-8e4d-06446f03b955" >
				<munit:payload value="#[readUrl('classpath://getcustomerscustomeridaddressaddressidlmorderpapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getcustomerscustomeridaddressaddressidlmorderpapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getcustomerscustomeridaddressaddressidlmorderpapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\customers\(customerid)\address\(addressid):lm-order-papi-config" doc:id="49fd0fe4-4990-4e03-ade7-6904954a22fa" name="get:\customers\(customerid)\address\(addressid):lm-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="253dd67f-f8aa-43ce-b8d3-44ffab5aa8a1" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getcustomerscustomeridaddressaddressidlmorderpapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\tracking\(trackingid):lm-order-papi-config-test" doc:id="2d913c29-1fb2-458e-8ab8-082ab3884248" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="89ae7697-c23e-4fb7-8408-f53fe873a53a" >
				<munit:payload value="#[readUrl('classpath://gettrackingtrackingidlmorderpapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://gettrackingtrackingidlmorderpapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://gettrackingtrackingidlmorderpapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\tracking\(trackingid):lm-order-papi-config" doc:id="8ceeb927-5842-473e-a2d4-aacd70365adc" name="get:\tracking\(trackingid):lm-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="91356213-f919-4fdc-b085-644e80426cf8" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import gettrackingtrackingidlmorderpapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\order\(orderid):lm-order-papi-config-test" doc:id="d1cb8b02-9600-46b3-a35d-06d320b63b3c" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="5e107a80-4d8c-466a-9d2b-b0e54d12c4fd" >
				<munit:payload value="#[readUrl('classpath://getorderorderidlmorderpapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getorderorderidlmorderpapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getorderorderidlmorderpapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\order\(orderid):lm-order-papi-config" doc:id="2164f29c-3204-4fc4-a001-9dc3253b9042" name="get:\order\(orderid):lm-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="02e976bc-837e-4e40-b3ab-00458311c52e" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getorderorderidlmorderpapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
<munit:test name="lm-productcatalog-papi-main-error-test" doc:id="b37a735e-ba4a-4494-b1a8-9d5b18cff304" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="09d34f11-1895-4fb7-8da3-2165b0f025f4" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/api/*" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			

</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="3b77ab9f-25d6-4199-a907-5458405343ce" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="7f650b32-3471-48e8-9043-1b0b459a4284" >
				<flow-ref doc:name="Flow-ref to lm-productcatalog-papi-main" doc:id="b2c118c1-7a10-4b2d-9adb-3baacfe67169" name="lm-order-papi-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="7fad1706-1bb7-4415-9449-2f4fa67906ae" type="ANY"/>
				</error-handler>
			</try>

		</munit:execution>
	
</munit:test>
	<munit:test name="lm-productcatalog-papi-console-error-test" doc:id="1d8476c8-bef6-4017-b5ba-2a229616f8e3" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="b3ceb93c-c846-49ef-bc37-155117880fee" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/api/*" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="cfee3ea4-ffe4-4f81-808b-75f702e3da67" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="b3edd603-0d90-4c7c-88ae-52c6f1802f55" >
				<flow-ref doc:name="Flow-ref to lm-productcatalog-papi-main" doc:id="71eaf0ff-7f6a-4104-90f5-718c4e7953dd" name="lm-order-papi-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="79f73376-f634-46cf-a584-8a018bdfa7eb" type="APIKIT:BAD_REQUEST"/>
				</error-handler>
			</try>

		</munit:execution>
	
</munit:test>
<munit:test name="post:\productcatalog:application\json:lm-productcatalog-papi-config-error-test" doc:id="510334a0-cf53-4d5b-a28d-50cb7a1e1146" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="4ffcc683-8862-4a2b-ac19-1e2e7702e8a4" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/api/*" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="2cc87c48-8382-48db-9574-cfcc16c7a193" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="ef89e6c5-ba40-4721-9da0-b532b1e4eed1" >
				<flow-ref doc:name="Flow-ref lm-productcatalog-papi-main" doc:id="9025b979-a5d0-4851-9465-e333743d6908" name="lm-order-papi-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="fde78712-0247-4335-850b-4d4f47cd622d" type="APIKIT:NOT_FOUND"/>
				</error-handler>
			</try>

		</munit:execution>
	
</munit:test>
		<munit:test name="lm-productcatalog-papi-main-error-test5" doc:id="df089720-20c5-4f7f-98c5-d2f256ba0b4d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="abaf29f5-b652-41db-a9ee-ec330dd509a0" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/api/*" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:METHOD_NOT_ALLOWED" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="f14d7349-7b01-44f4-9f43-fd58f5259935" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:METHOD_NOT_ALLOWED" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="91546685-25a7-4c45-97b6-5b690c0c97a0" >
				<flow-ref doc:name="Flow-ref lm-productcatalog-papi-main" doc:id="a8bbd5ed-38a3-424a-bf9a-04f96c4e37ed" name="lm-order-papi-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="ce6b834c-8097-433a-8635-31a6ab315bb9" type="APIKIT:METHOD_NOT_ALLOWED"/>
				</error-handler>
			</try>

		</munit:execution>
	
</munit:test>
	<munit:test name="lm-productcatalog-papi-main-error-test1" doc:id="50529eee-06c7-459d-9c10-d04c0b3ebd47" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="240c3b24-4045-4a88-9cda-1432a79a57fa" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/api/*" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_ACCEPTABLE" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="5db90655-ddb8-4b4f-87cc-803f26ae1a14" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_ACCEPTABLE" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="cbe1d0a6-b9a5-4f01-a068-5329f77ee92a" >
				<flow-ref doc:name="Flow-ref lm-productcatalog-papi-main" doc:id="92a0db16-b3ee-436a-af8f-5769e8517000" name="lm-order-papi-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="f63d6dbe-c38b-4fef-9c8f-5b100d9f41c4" type="APIKIT:NOT_ACCEPTABLE"/>
				</error-handler>
			</try>

		</munit:execution>
	
</munit:test>
	<munit:test name="lm-productcatalog-papi-main-error-test2" doc:id="0c000bd7-4a18-45a3-ba23-ed3adc125576" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="30394fb1-6bf2-4531-94c3-2f6099a149c6" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/api/*" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="d1a18339-e6af-46a0-8796-6f947d4693c4" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="0b409883-4867-460e-a4e8-05c5668c08f0" >
				<flow-ref doc:name="Flow-ref lm-productcatalog-papi-main" doc:id="2b0666b6-6c83-4d82-bcae-901d40e73a90" name="lm-order-papi-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="867eb457-9a82-4e33-bd3b-300fe31fb09f" type="APIKIT:UNSUPPORTED_MEDIA_TYPE"/>
				</error-handler>
			</try>

		</munit:execution>
	
</munit:test>
	<munit:test name="lm-productcatalog-papi-main-error-test3" doc:id="cf3c85fd-c147-4def-9392-94c10a7c2f09" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="e1320b29-16ae-42ae-9925-86ca2e7eda88" processor="http:listener">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-httpListenerConfig" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/api/*" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_IMPLEMENTED" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="bf27b865-bbcd-42d2-adcb-d2fa42eb72d8" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="lm-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_IMPLEMENTED" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="54663784-cdd5-4893-a0d4-9bd8bdb41e73" >
				<flow-ref doc:name="Flow-ref lm-productcatalog-papi-main" doc:id="b8e3fc0d-ccff-4c4a-b40b-565b48aa1619" name="lm-order-papi-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="c041e7ae-644b-4411-84ce-6d4f724e12fd" type="APIKIT:NOT_IMPLEMENTED"/>
				</error-handler>
			</try>

		</munit:execution>
	
</munit:test>
	

</mule>
